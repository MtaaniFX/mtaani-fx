-- Create the 'profiles' table to store user profile information, extending the default 'users' table from Supabase.
create table profiles
(
    id              uuid references auth.users on delete cascade not null primary key,
    updated_at      timestamp with time zone,
    username        text unique,
    full_name       text,
    avatar_url      text,
    account_balance numeric default 0,
    constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
alter table profiles
    enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
    for select using (true);

create policy "Users can insert their own profile." on profiles
    for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
    for update using (auth.uid() = id);

-- Create the 'groups' table to store information about investment groups.
create table groups
(
    id                      bigint generated by default as identity primary key,
    group_type              text                                         not null,
    created_at              timestamp with time zone default now()       not null,
    updated_at              timestamp with time zone,
    name                    text                                         not null unique,
    description             text,
    avatar_url              text,
    owner_id                uuid references auth.users on delete cascade not null,
    balance                 numeric                  default 0,
    contributions_finalized boolean                  default false,
    constraint name_length check (char_length(name) >= 3)
);

alter table groups
    enable row level security;

-- group owner can update the group
create policy "Group owners can update own groups." on groups
    for update using (auth.uid() = owner_id);

-- group owner can delete the group
create policy "Group owners can delete own groups." on groups
    for delete using (auth.uid() = owner_id);

-- Create the 'group_members' table to manage group memberships and roles.
create table group_members
(
    id        bigint generated by default as identity primary key,
    group_id  bigint references groups (id) on delete cascade           not null,
    user_id   uuid references auth.users on delete cascade              not null,
    role      text check (role in ('admin', 'member')) default 'member' not null,
    joined_at timestamp with time zone                 default now()    not null
);

alter table group_members
    enable row level security;

-- users can view their group memberships
create policy "Users can view their group memberships." on group_members
    for select using (auth.uid() = user_id);

-- group owner can add members
create policy "Group owners can add members." on group_members
    for insert with check (
    auth.uid() = (select owner_id
                  from groups
                  where id = group_id)
    );

-- group owner and admins can remove a member
create policy "Group owners and admins can remove members." on group_members
    for delete using (
    auth.uid() = (select owner_id
                  from groups
                  where id = group_id) or
    (select role
     from group_members
     where group_id = group_id
       and user_id = auth.uid()) = 'admin'
    );

-- group members can view group members
create policy "Group members can view group members." on group_members
    for select using (
    (select 1
     from group_members
     where group_id = group_id
       and user_id = auth.uid()) > 0
    );

-- Create the 'contributions' table to track member contributions.
create table contributions
(
    id             bigint generated by default as identity primary key,
    group_id       bigint references groups (id) on delete cascade not null,
    user_id        uuid references auth.users on delete cascade    not null,
    amount         numeric                                         not null,
    contributed_at timestamp with time zone default now()          not null
);

alter table contributions
    enable row level security;

-- group members can view their contributions
create policy "Group members can view their contributions." on contributions
    for select using (
    auth.uid() = user_id and
    (select 1
     from group_members
     where group_id = group_id
       and user_id = auth.uid()) > 0
    );

-- group members can add contributions, if group is not finalized
create policy "Group members can add contributions." on contributions
    for insert with check (
    (select contributions_finalized
     from groups
     where id = group_id) = false and
    (select 1
     from group_members
     where group_id = group_id
       and user_id = auth.uid()) > 0
    );

-- Create the 'interest_rates' table to store interest rates based on group type.
create table interest_rates
(
    id         bigint generated by default as identity primary key,
    group_type text                                   not null unique,
    rate       numeric                                not null,
    updated_at timestamp with time zone default now() not null
);

alter table interest_rates
    enable row level security;

-- anyone can view interest rates
create policy "Interest rates are viewable by everyone." on interest_rates
    for select using (true);

-- only service_role can insert interest rates
create policy "Service role can insert interest rates." on interest_rates
    for insert with check (auth.role() = 'service_role');

-- Create the 'bonuses' table to store bonus amounts for groups.
create table bonuses
(
    id         bigint generated by default as identity primary key,
    group_id   bigint references groups (id) on delete cascade not null,
    amount     numeric                                         not null,
    created_at timestamp with time zone default now()          not null
);

alter table bonuses
    enable row level security;

-- group members can view their bonuses
create policy "Group members can view their bonuses." on bonuses
    for select using (
    (select 1
     from group_members
     where group_id = group_id
       and user_id = auth.uid()) > 0
    );
